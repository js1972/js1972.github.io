---
layout: post
comments: true
title:  "Playing with Raspberry PI and OpenCV"
excerpt: "Just got myself a Raspberry Pi 3 to have a play with and struggled to get it to work as per the existing (enormous) collection of blog posts. So, here I've jotted down all the steps that I used to make it all work..."
date:   2016-06-17 14:30:00
mathjax: false
---

# The kit
When you unbox your new toy (Raspberry Pi 3 in this case) you should find you have the following bits of kit, including a few that should already be around the house:
+ Raspberry Pi 3 board
+ Raspberry Pi Camera module (you did order that too didn't you?)
+ Micro SD Card (with card reader for plugging into your laptop/home computer)
+ HDMI cable
+ Old-fashioned USB Keyboard
+ A TV (with HDMI input)

When I bought my Pi it came with [Noobs](https://www.raspberrypi.org/blog/introducing-noobs/) pre-installed on the SD card - or so the documentation said! However once I connected the HDMI cable to the TV and plugged the USB keyboard into the Pi, then finally "powered up" - **I just got a bricked rainbow screen**.

A quick google search will show that this *unfortunately* is quite common (wtf) so I then manually downloaded [NOOBS](https://www.raspberrypi.org/downloads/) from the Raspberry PI downloads site. Followed the instructions to wipe my SD card and put the new NOOBS version on. Powered up! This time voila! I see the NOOBS setup screen.

Now... before we go any further.

NOOBS initially shows a screen that allows you to select an operating system to install. I chose Raspbian which is a variant of Debian that most people *playing* with a Pi seem to be using.
But beware if you only have an 8Gb memory card that if you install Raspbian from NOOBS it seems to take up more space than if you actually download a Raspbian image on its own and install it onto the SD card yourself.

This caused me issues as later on we want to compile OpenCV on the Pi and it needs a good 4GB of space to do this. With the NOOBS installed Raspbian I only had about 3.8Gb free (and thats after I de-installed the Wolfram app which is nearly 1Gb on its own).

Biting the bullet:

Instead of mucking around I just went out and bought a 32GB card. They are pretty cheap now at about AUD$24 for a fast one.

So to sum up.... download the [Raspbian](https://www.raspberrypi.org/downloads/) image directly and following the [instructions](https://www.raspberrypi.org/documentation/installation/installing-images/README.md) to get it on your SD card. Then boot up the Pi.

*** WARNING ***  The Raspberry PI download site is woefully slow. I was using a 90Mbps Internet connection yet it still took a full 24 hours to download Raspbian!

# Basic config
For me the Pi initially boots into the Raspbian GUI. I don't want this so need to set it to boot to a terminal instead.

First issue I had was... How do I select the menus in the GUI (I didn't have an old-fashioned USB mouse laying around). Luckily by just clicking every key on the keyboard I found that the Ctrl key opens up the main menu and you can then use the arrow keys to navigate around.

You can select the Terminal application and from there run the Pi configuration utility with:
```
sudo raspi-config
```

So with `sudo raspi-config` open we need to perform the following tasks:
+ Extend the size of the memory card (by default Raspbian can't see the whole card to extend is to max.)
+ Set Terminal on boot (we don't want the GUI to launch each time we boot)
+ Enable the Pi Camera module.
+ Set logon on boot (I set it to ask for username and password on boot - this is not necessary but I just liked it.)
+ Enable SSH.

By default the Pi's username is `pi` and password is `raspberry`.

# SSH and a Static IP
We don't want to always be chained to a TV with the HDMI cable and have a keyboard plugged into our Pi so typically we will SSH into it. To make this more pleasant though, lets setup a static IP address for the Pi, otherwise we will have to stuff around with figuring out its IP address every time we turn it on.
Now there is *the old way* and there is the *new way* to do this...

## First we need to enable WiFi
You can run
```
sudo iwlist wlan0 scan
```
...to see a list of available WiFi networks.


Now edit the wpa-supplicant file with `sudo nano /etc/wpa_supplicant/wpa_suplicant.conf` and add the following at the bottom:
```
network={
	ssid="Your Wifi ESSID whcih can be seen in the iwlist command"
	psk="Your wifi password"
}
```
Now save by entering `Ctrl-O` then `Ctrl-X`.

`sudo reboot` and your Pi should now be connected to your wifi network.

## Now enable a static IP
The *old way* involved changing the /etc/network/interfaces file.
The *new way* involves changing the /etc/dhcpd.conf field instead. We need to add the following values:
```
static ip_address=192.168.1.99		# Whatever IP you want
static routers=192.168.0.1			# Gateway address
static domain_name=192.168.0.1		# Destination address
```
You can use `ifconfig` and `netstat -nr` to obtain some of these values.

You should now be able to log into your pi via the static IP.

# Useful commands
A few useful commands before we go on:
```
sudo raspi-config		# Configuration utility program
sudo reboot				# Reboot the Pi
sudo poweroff			# Do everything necessary (like log out) so that its safe to pull out the power cable
df -h					# View file system details
kill -9 <process id>	# Kill a running process where <process id> can be determined with 'ps'
```

If you are using a terminal such as Cathode or Prompt on the iPad you will want to install **[screen](https://www.gnu.org/software/screen/manual/screen.html)** on the Pi. Without it your ssh session will terminate often (whenever you iPad sleeps or the app is in background for too long). This is a real pain as any running command (like an install) will terminate.

Installing screen is as simple as:
```
sudo apt-get install screen
```

To use it simply run `screen bash` which will open another terminal instance. You can now run processes that won't terminate if your ssh session does.
To detach from the termination screen terminal session use `Ctrl+A and the D`.

To list all screen instances use `screen -list`.

To reconnect to a screen terminal use `screen -r` (if you only have one) or `screen -r <terminal instance>`.

To end a terminal instance use `Ctrol+D` from within the instance.

# Install OpenCV so we can play with the Pi camera
This will require compiling OpenCV source on the Pi and will require a minimum of around 4GB of space.

When building from source **do not** use the `make -j4` option (which uses all 4 cores) as it failed every time for me. Instead just use `make` which may be a bit slower - **but it works**.
The build time was approx. 3 hours for me.

## X Server for viewing application windows

# Home surveillance system
To build your own home surveillance system with the Pi you can install the great `motion` program which runs just fine on the Pi.

Unlike all the blogs posts out there however, you need to activate a kernel module in Raspbian so that the Pi camera is treated like a USB camera. Then it will work flawlessly wiht the Pi.


## Camera wrapper class
OpenCV works with USB webcams. This includes when running it on the Raspberry Pi. However, the Pi Camera is *not* a USB webcam.

A set of [image processing utilities](https://github.com/jrosebr1/imutils) is available that provides a nice wrapper class which can be used in your OpenCV code without worrying which camera you are using.

See this pyimagesearch.com blog post for an example on how to use this camera wrapper class: [imutils wraper class for camera](http://www.pyimagesearch.com/2016/01/04/unifying-picamera-and-cv2-videocapture-into-a-single-class-with-opencv/)

# Image Analysis
Install OpenCV on your laptop (a Mac in my case) first as its much easier to play with the code that way. Then when you have some working code you want to test on the Pi, `scp` it across and give it a go...
